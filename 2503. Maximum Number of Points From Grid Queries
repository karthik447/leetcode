import java.util.*;

class Solution {
    public int[] maxPoints(int[][] grid, int[] queries) {
        int m = grid.length, n = grid[0].length;
        int[] result = new int[queries.length];
        
        int[][] qIndices = new int[queries.length][2];
        for (int i = 0; i < queries.length; i++) {
            qIndices[i] = new int[]{queries[i], i};
        }
        Arrays.sort(qIndices, Comparator.comparingInt(a -> a[0]));
        
        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        pq.offer(new int[]{grid[0][0], 0, 0});
        
        boolean[][] visited = new boolean[m][n];
        visited[0][0] = true;
        
        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        
        int points = 0, maxVal = 0;
        
        for (int[] query : qIndices) {
            int qValue = query[0], index = query[1];

            while (!pq.isEmpty() && pq.peek()[0] < qValue) {
                int[] cell = pq.poll();
                int r = cell[1], c = cell[2];
                maxVal = Math.max(maxVal, cell[0]);
                points++;

                for (int[] dir : directions) {
                    int nr = r + dir[0], nc = c + dir[1];
                    if (nr >= 0 && nr < m && nc >= 0 && nc < n && !visited[nr][nc]) {
                        pq.offer(new int[]{grid[nr][nc], nr, nc});
                        visited[nr][nc] = true;
                    }
                }
            }
            
            result[index] = points;
        }
        
        return result;
    }
}
