import java.util.*;

class Solution {
    private static final int MOD = 1_000_000_007;
    private long[] fact;
    private long[] invFact;
    private Map<String, Long> memo;

    public int countBalancedPermutations(String num) {
        int n = num.length();
        int[] count = new int[10];
        for (char c : num.toCharArray()) {
            count[c - '0']++;
        }

        fact = new long[n + 1];
        invFact = new long[n + 1];
        computeFactorials(n);
        memo = new HashMap<>();

        long result = dfs(count, 0, 0, n);
        return (int) result;
    }

    private long dfs(int[] count, int index, int diff, int remaining) {
        if (index == 10) {
            return diff == 0 && remaining == 0 ? 1 : 0;
        }
        String key = Arrays.toString(count) + "," + index + "," + diff;
        if (memo.containsKey(key)) {
            return memo.get(key);
        }
        long res = 0;
        for (int i = 0; i <= count[index]; i++) {
            count[index] -= i;
            int newDiff = diff + i * index;
            res = (res + dfs(count, index + 1, newDiff, remaining - i)) % MOD;
            count[index] += i;
        }
        memo.put(key, res);
        return res;
    }

    private void computeFactorials(int n) {
        fact[0] = invFact[0] = 1;
        for (int i = 1; i <= n; i++) {
            fact[i] = fact[i - 1] * i % MOD;
        }
        invFact[n] = modInverse(fact[n]);
        for (int i = n - 1; i >= 1; i--) {
            invFact[i] = invFact[i + 1] * (i + 1) % MOD;
        }
    }

    private long modInverse(long x) {
        return pow(x, MOD - 2);
    }

    private long pow(long x, int y) {
        long res = 1;
        x %= MOD;
        while (y > 0) {
            if ((y & 1) == 1) res = res * x % MOD;
            x = x * x % MOD;
            y >>= 1;
        }
        return res;
    }
}
