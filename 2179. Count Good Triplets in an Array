class Solution {
    public long goodTriplets(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int[] indexInNums2 = new int[n];
        for (int i = 0; i < n; i++) {
            indexInNums2[nums2[i]] = i;
        }

        int[] transformed = new int[n];
        for (int i = 0; i < n; i++) {
            transformed[i] = indexInNums2[nums1[i]];
        }

        BIT leftBIT = new BIT(n);
        int[] leftSmaller = new int[n];
        for (int i = 0; i < n; i++) {
            leftSmaller[i] = leftBIT.query(transformed[i]);
            leftBIT.update(transformed[i], 1);
        }

        BIT rightBIT = new BIT(n);
        int[] rightGreater = new int[n];
        for (int i = n - 1; i >= 0; i--) {
            rightGreater[i] = rightBIT.query(n - 1) - rightBIT.query(transformed[i]);
            rightBIT.update(transformed[i], 1);
        }

        long count = 0;
        for (int i = 0; i < n; i++) {
            count += (long) leftSmaller[i] * rightGreater[i];
        }

        return count;
    }

    class BIT {
        int[] tree;

        public BIT(int size) {
            tree = new int[size + 1];
        }

        public void update(int index, int value) {
            index++;
            while (index < tree.length) {
                tree[index] += value;
                index += index & -index;
            }
        }

        public int query(int index) {
            index++;
            int sum = 0;
            while (index > 0) {
                sum += tree[index];
                index -= index & -index;
            }
            return sum;
        }
    }
}
